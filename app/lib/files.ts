const FILE_DB='SJH_FILES', STORE='files', USE_IDB='indexedDB'in self; function openFDB(){return new Promise<IDBDatabase>((res,rej)=>{const r=indexedDB.open(FILE_DB,1);r.onupgradeneeded=()=>{const db=r.result;if(!db.objectStoreNames.contains(STORE))db.createObjectStore(STORE,{keyPath:'id'})};r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error)})}
export async function saveFile(day:string,file:File){const id=`media:${day}:${file.name}`;const meta={id,day,name:file.name,type:file.type,size:file.size,ts:Date.now()};const buf=await file.arrayBuffer(); if(USE_IDB){const db=await openFDB();await new Promise((res,rej)=>{const tx=db.transaction(STORE,'readwrite');tx.objectStore(STORE).put({...meta,data:new Blob([buf],{type:file.type})});tx.oncomplete=()=>res(0);tx.onerror=()=>rej(tx.error)});db.close()} const idx=JSON.parse(localStorage.getItem('SJH:files:index')||'[]');localStorage.setItem('SJH:files:index',JSON.stringify(Array.from(new Set([...idx,meta]))));return {ok:true,id}}
export async function listFiles(day:string){const idx=JSON.parse(localStorage.getItem('SJH:files:index')||'[]');return idx.filter((m:any)=>m.day===day)}
export async function getFile(id:string){if(USE_IDB){const db=await openFDB();const row:any=await new Promise((res,rej)=>{const tx=db.transaction(STORE,'readonly');const g=tx.objectStore(STORE).get(id);g.onsuccess=()=>res(g.result||null);g.onerror=()=>rej(g.error)});db.close();return row?.data||null}return null}
