import {listPaths,load} from './storage';import {listFiles,getFile} from './files'
export async function exportJSON(){const paths=listPaths();const data:any={entries:[],files:[]};for(const p of paths){const e=await load(p); if(e)data.entries.push(e)} const days=Array.from(new Set(paths.filter(p=>p.startsWith('journal/')).map(p=>p.slice(8,18)))); for(const d of days){const metas=await listFiles(d); for(const m of metas){const b=await getFile(m.id); const b64=b? await blobToBase64(b):null; data.files.push({meta:m,b64})}} downloadBlob(new Blob([JSON.stringify(data)],{type:'application/json'}),`sjh_backup_${new Date().toISOString().slice(0,10)}.json`)}
export async function importJSON(file:File){const j=JSON.parse(await file.text()); alert(`נמצא ${j.entries?.length||0} רשומות ו-${j.files?.length||0} קבצים`) }
function downloadBlob(b:Blob,name:string){const a=document.createElement('a');a.href=URL.createObjectURL(b);a.download=name;a.click();setTimeout(()=>URL.revokeObjectURL(a.href),1e3)}
async function blobToBase64(bl:Blob){const buf=await bl.arrayBuffer();let bin='';const bytes=new Uint8Array(buf);for(let i=0;i<bytes.length;i++)bin+=String.fromCharCode(bytes[i]);return btoa(bin)}
